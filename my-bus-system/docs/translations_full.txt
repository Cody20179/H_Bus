取得台北時間=>Obtain Taipei time
取得台灣時間的 datetime 物件（無時區資訊，供資料庫使用）=>Get the datetime object of Taiwan time (without time zone information, for database use)
月份格式需為 YYYY-MM=>The month format must be YYYY-MM
極簡 In-Memory Redis 替代品（僅供開發測試）。
    支援本檔案用到的方法：get, setex, delete, incr, expire, ttl, ping, set
    注意：非多進程安全，不適合正式環境。
    =>Minimalist In-Memory Redis alternative (development testing only).
Methods used to support this file: get, setex, delete, incr, expire, ttl, ping, set
Note: Not multi-process security and not suitable for formal environments.
單向=>unidirectional
雙向=>Two-way
去程=>Going
回程=>Return
單程=>One Way
從 Bearer token 中獲取當前用戶=>Get the current user from Bearer token
無效的 token 格式=>Invalid token format
用戶不存在=>The user does not exist
無效的 token=>Invalid token
[OTP] redis 模組未安裝，改用 InMemoryRedis（開發用）=>[OTP] Redis module is not installed, use InMemoryRedis instead (for development)
檢查來源是否被允許=>Check if the source is allowed
無效憑證=>Invalid voucher
帳號已停用，請聯繫管理員=>The account has been disabled, please contact the administrator
帳號狀態異常=>Account status abnormal

    取得會員統計資料
    =>Obtain member statistics

    取得會員增長趨勢資料
    參數: days - 查詢天數 (1, 7, 30)
    =>Obtain member growth trend information
Parameters: days - query days (1, 7, 30)

    回傳預約統計：
    - this_month: 本月建立的預約數（以 created_at 為主，若無則以 booking_time）
    - today_new: 今日新建立的預約數
    - pending: 審核中筆數（review_status='pending'）
    - completed: 已完成筆數（reservation_status='completed'）
    - last_month: 上月建立的預約數
    - growth_rate: 相較上月成長率（%）
    =>Return to booking statistics:
- this_month: The number of reservations established this month (mainly created_at, if not, booking_time)
- today_new: Number of newly created appointments today
- pending: Number of transactions in review (review_status='pending')
- completed: The number of completed transactions (reservation_status='completed')
- last_month: The number of appointments created last month
- growth_rate: growth rate compared to last month (%)
起始月份 YYYY-MM=>Starting month YYYY-MM
結束月份 YYYY-MM=>End month YYYY-MM
mode 僅支援 monthly 或 range=>mode only supports monthly or range
month 需介於 1-12=>month needs to be between 1-12
range 模式需提供 start_month 與 end_month=>range mode requires start_month and end_month
end_month 不可早於 start_month=>end_month cannot be earlier than start_month
取得預約趨勢資料時發生錯誤=>An error occurred while retrieving appointment trend data
日期格式 YYYY-MM=>Date format YYYY-MM
mode 參數僅支援 monthly 或 range=>Mode parameters only support monthly or range
結束月份不可早於開始月份=>The end month cannot be earlier than the beginning month
取得預約狀態資料時發生錯誤=>An error occurred while obtaining the appointment status information

    回傳路線統計：
    - total: bus_routes_total 總路線數
    - active: 啟用路線數（status = 1）
    - inactive: 停用路線數
    - on_time_rate: 以有站點的路線比率作為近似值（DISTINCT route_id / total）
    =>Return route statistics:
- total: bus_routes_total Total Number of Routes
- active: Number of routes enabled (status = 1)
- inactive: Number of routes to be disabled
- on_time_rate: Approximate value using the route ratio with the site (DISTINCT route_id/total)

    取得會員活躍度分析數據
    
    參數:
    - days: 分析天數 (1, 7, 30)
    =>Obtain member activity analysis data

parameter:
- days: Analysis days (1, 7, 30)
高活躍=>Highly active
中活躍=>Active
低活躍=>Low active
不活躍=>Inactive

    取得管理員統計資料
    =>Obtain administrator statistics

    取得資料庫狀況統計
    =>Obtain database status statistics
正常=>normal
良好=>good
一般=>generally
異常=>abnormal
用戶名或密碼錯誤=>Incorrect username or password
帳號已停用，請聯絡管理員=>The account has been disabled, please contact the administrator
用戶尚未設定密碼，請聯絡管理員=>The user has not set a password yet, please contact the administrator
密碼格式錯誤，請聯絡管理員重設密碼=>Password format is wrong, please contact the administrator to reset the password
登入成功=>Login successfully

    取得管理員用戶列表（支援分頁和搜尋）
    
    參數:
    - page: 頁碼 (預設 1)
    - limit: 每頁筆數 (預設 10)
    - search: 搜尋關鍵字（搜尋用戶名）
    - status: 狀態篩選 (active, inactive)
    =>Obtain the administrator user list (supports pagination and search)

parameter:
- page: Page number (Preset 1)
- limit: Number of writings per page (preset 10)
- search: Search for keywords (search for username)
- status: status filter (active, inactive)
未指定=>not specified
取得所有管理員角色=>Obtain all administrator roles
建立新的管理員用戶=>Create a new administrator user
指定的角色不存在=>The specified role does not exist
系統只能有一組 Super Admin=>The system can only have one group of Super Admins
高級管理員只能創建 Dispatcher 角色的帳號=>Senior administrators can only create accounts with the Dispatcher role
沒有權限創建用戶=>No permission to create a user
用戶名已存在=>The username already exists
管理員用戶建立成功=>Administrator user creation successfully
更新管理員用戶=>Update administrator user
管理員用戶不存在=>Administrator user does not exist
Super Admin 不能修改自己的角色權限，包括降級為 Admin=>Super Admin cannot modify its role permissions, including downgrading to Admin
Super Admin 不能停用自己的帳號=>Super Admin cannot disable your account
Super Admin 不能修改其他 Super Admin 的資訊=>Super Admin cannot modify other Super Admin information
不能修改 Super Admin 用戶=>Super Admin users cannot be modified
高級管理員不能修改其他 Admin 用戶=>Senior administrators cannot modify other Admin users
無權限修改用戶角色=>No permission to modify user role
沒有權限修改用戶=>No permission to modify the user
管理員用戶更新成功=>Administrator user update successfully
刪除管理員用戶=>Delete the administrator user
不能刪除自己的帳號=>Can't delete your account
Super Admin 不能刪除其他 Super Admin=>Super Admin Cannot delete other Super Admin
高級管理員僅可刪除 Dispatcher 用戶=>Advanced administrators can only delete Dispatcher users
沒有權限刪除用戶=>No permission to delete users
無法刪除超級管理員=>Cannot delete super administrator
管理員用戶刪除成功=>Administrator user deletion successfully

# 角色管理 API
@app.get("/roles")
def get_roles(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    return {"roles": [{"role_id": r.role_id, "role_name": r.role_name, "role_description": r.role_description, "permissions": r.permissions, "is_system_role": r.is_system_role} for r in roles]}

@app.post("/roles")
def create_role(role: AdminRoleCreate, db: Session = Depends(get_db)):
    # 移除權限檢查
    new_role = AdminRole(**role.dict())
    db.add(new_role)
    db.commit()
    db.refresh(new_role)
    return {"role_id": new_role.role_id, "message": "角色建立成功"}

@app.put("/roles/{role_id}")
def update_role(role_id: int, role_update: AdminRoleUpdate, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    for key, value in role_update.dict(exclude_unset=True).items():
        setattr(role, key, value)
    db.commit()
    return {"message": "角色更新成功"}

@app.delete("/roles/{role_id}")
def delete_role(role_id: int, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    db.delete(role)
    db.commit()
    return {"message": "角色刪除成功"}

# 權限 API
@app.get("/permissions")
def get_permissions(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    permissions = {}
    for role in roles:
        permissions[role.role_name] = role.permissions.split(',') if role.permissions else []
    return {"permissions": permissions}
=># 角色管理 API
@app.get("/roles")
def get_roles(db: Session = Depends(get_db)):
# 移除權限檢查
roles = db.query(AdminRole).all()
return {"roles": [{"role_id": r.role_id, "role_name": r.role_name, "role_description": r.role_description, "permissions": r.permissions, "is_system_role": r.is_system_role} for r in roles]}

@app.post("/roles")
def create_role(role: AdminRoleCreate, db: Session = Depends(get_db)):
# 移除權限檢查
new_role = AdminRole(**role.dict())
db.add(new_role)
db.commit()
db.refresh(new_role)
return {"role_id": new_role.role_id, "message": "角色建立成功"}

@app.put("/roles/{role_id}")
def update_role(role_id: int, role_update: AdminRoleUpdate, db: Session = Depends(get_db)):
# 移除權限檢查
role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
if not role:
raise HTTPException(status_code=404, detail="角色不存在")
for key, value in role_update.dict(exclude_unset=True).items():
setattr(role, key, value)
db.commit()
return {"message": "角色更新成功"}

@app.delete("/roles/{role_id}")
def delete_role(role_id: int, db: Session = Depends(get_db)):
# 移除權限檢查
role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
if not role:
raise HTTPException(status_code=404, detail="角色不存在")
db.delete(role)
db.commit()
return {"message": "角色刪除成功"}

# 權限 API
@app.get("/permissions")
def get_permissions(db: Session = Depends(get_db)):
# 移除權限檢查
roles = db.query(AdminRole).all()
permissions = {}
for role in roles:
permissions[role.role_name] = role.permissions.split(',') if role.permissions else []
return {"permissions": permissions}
在 bus_routes_total 建立一筆新路線記錄=>Create a new route record in bus_routes_total
路線名稱已存在=>The route name already exists
路線新增成功=>Successful route addition
更新 bus_routes_total 的欄位（部分更新）=>Update the field of bus_routes_total (partially updated)
找不到指定的路線=>The specified route cannot be found
direction 必須為 '單向' 或 '雙向'=>direction must be 'one-way' or 'two-way'
沒有欄位需要更新=>No columns need to be updated
路線更新成功=>Route update successfully
刪除路線：會同時刪除對應的 bus_route_stations 以及 bus_routes_total 的紀錄（若存在）。=>Delete route: The corresponding bus_route_stations and bus_routes_total records will be deleted at the same time (if present).
路線刪除成功=>Route deletion successfully
缺少 account=>Missing account
驗證碼已鎖定，請稍後再試=>The verification code is locked, please try again later
發送過於頻繁，請稍後再試=>Send too frequently, please try again later
請求次數過多，稍後再試=>Too many requests, try again later
此 IP 請求過多，請稍後再試=>There are too many requests for this IP, please try again later
缺少 account 或 code=>Missing account or code
已鎖定，請稍後再試=>Locked, please try again later
驗證碼已過期或不存在=>The verification code has expired or does not exist
嘗試次數過多，已鎖定=>Too many attempts, locked
用 ticket 兌換，完成下一步（例如登入/註冊）。這裡僅驗證 ticket 並刪除。=>Redeem with ticket to complete the next step (such as login/register).Here only the ticket is verified and deleted.
ticket 無效或已過期=>ticket invalid or expired
創建新的路線站點=>Create a new route site
站點創建成功=>Site creation successfully
更新路線站點：允許自由改順序，後端自動重排避免衝突。=>Update route site: Allow free order change, and the backend automatically reorders to avoid conflicts.
站點更新成功=>Site update successfully
刪除路線站點=>Delete the route site
找不到要刪除的站點=>The site you want to delete cannot be found
站點刪除成功=>Site deletion successfully
獲取所有路線（從 bus_route_stations 表中提取）=>Get all routes (extracted from the bus_route_stations table)
市民小巴-行動遊花蓮=>Citizen minibus-Motion Tour Hualien
獲取篩選後的路線站點（支援分頁和搜尋）=>Get filtered route sites (paging and searching support)
沒有權限執行此操作=>No permission to perform this operation
缺少必要欄位=>Necessary columns are missing
沒有變更=>No changes
預約不存在=>The appointment does not exist
無效的車輛狀態=>Invalid vehicle status
車牌號碼不可為空=>License plate number must not be empty
可載人數必須大於 0=>The number of people that can be accommodated must be greater than 0
車牌號碼已存在=>License plate number already exists
車輛不存在=>The vehicle does not exist
沒有權限新增會員=>No permission to add new members
用戶建立成功=>User creation successfully
沒有權限更新會員=>No permission to update members
用戶更新成功=>User update successfully
沒有權限刪除會員=>No permission to delete a member
用戶刪除成功=>User deletion successfully
設定台北時區=>Setting Taipei time zone
===== 預約分析共用工具 ======>===== Appointment analysis shared tool =====
載入環境變數=>Loading environment variables
MySQL 資料庫設定=>MySQL archive settings
===== OTP/驗證碼：Redis 設定與工具 ======>===== OTP/Verification Code: Redis Settings and Tools =====
驗證碼有效 5 分鐘=>Verification code is valid for 5 minutes
驗證碼長度 6=>Verification code length 6
最多嘗試次數 5=>Maximum number of attempts 5
重送冷卻 60 秒=>Resend cooldown 60 seconds
每目的 10 分鐘最多 3 次=>Up to 3 times per purpose 10 minutes
每 IP 1 小時最多 10 次=>Up to 10 times per IP 1 hour
e.g. "123456" 便於測試=>e.g. "123456" for easy testing
資料庫模型（匹配實際表結構）=>Database model (matches actual table structure)
雜湊密碼=>Hash password
使用台灣時間（無時區資訊）以確保與需求一致=>Use Taiwan time (without time zone information) to ensure consistency with requirements
與資料庫一致，並兼容歷史資料 'None'=>Consistent with the database and compatible with historical data 'None'
預約狀態=>Appointment status
Redis: key 不存在=>Redis: key does not exist
沒有 TTL=>No TTL
Pydantic 模型（更新以匹配表結構）=>Pydantic model (updated to match table structure)
明文密碼，會在API中雜湊=>Plain text passwords will be made up in the API
====== 請求模型 =======>====== Request model ======
可選：若你要過濾去/回/單程=>Optional: If you want to filter out/return/single-way
====== 回應模型（對齊你實際的欄位）=======>====== Response model (align your actual column) ======
分鐘(或秒) 看你DB定義=>Minutes (or seconds) depends on your DB definition
====== Reservation 模型 =======>======= Reservation Model ======
依賴注入=>Dependency injection
工具函數=>Tool functions
簡單的 token 解析 (格式: admin_{user_id}_token)=>Simple token parsing (format: admin_{user_id}_token)
從 token 中提取用戶 ID=>Extract user ID from token
假設 permissions 是逗號分隔=>Assume permissions are comma separated
Redis 相關輔助函數=>Redis related helper functions
若無 redis 模組，回退至記憶體版（僅開發用）=>If there is no redis module, fall back to memory version (for development only)
連線失敗時回退到 InMemoryRedis：開發測試無阻=>Failed to InMemoryRedis: Developing and testing without any obstacles
FastAPI 應用=>FastAPI Application
動態 CORS 設定函數=>Dynamic CORS setting function
192.168.0.x 網段=>192.168.0.x network segment
192.168.1.x 網段=>192.168.1.x network segment
10.0.0.x 網段=>10.0.0.x network segment
任何使用 5173 port 的地址=>Any address using port 5173
加入 CORS 設定=>Join CORS settings
登入 API=>Login API
檢查用戶狀態=>Check user status
驗證密碼=>Verify password
更新 last_login 為台北時間=>Update last_login for Taipei time
獲取角色資訊=>Get role information
回傳前端期望的格式=>Return the expected format of the front-end
簡化的 token=>Simplified token
儀表板統計 API=>Dashboard Statistics API
計算總會員數=>Calculate the total number of members
計算活躍會員數 (status = 'active')=>Calculate the number of active members (status = 'active')
計算本月新會員數 (使用台北時區)=>Calculate the number of new members this month (using Taipei time zone)
轉換為無時區的 datetime 供資料庫查詢使用=>Convert to a time zone-free datetime for database query
先檢查 User 模型是否有 created_at 欄位=>First check whether the User model has created_at column
如果沒有 created_at 欄位，則設為 0=>If there is no created_at field, set to 0
會員增長趨勢 API=>Member Growth Trends API
根據天數決定分組方式=>Determine the grouping method according to the number of days
最近1天：按小時分組=>Last 1 day: Grouped by hour
近7天：按天分組=>Last 7 days: Grouped by day
近30天：按週分組=>Last 30 days: Grouped by week
分成5週，每週6天=>Divided into 5 weeks, 6 days a week
計算統計資料=>Calculate statistics
回傳預設資料以避免前端錯誤=>Return preset information to avoid front-end errors
預約統計（本月/今日/狀態）=>Appointment Statistics (this month/today/status)
本月第一天 00:00=>The first day of this month is 00:00
下月第一天 00:00=>Next month's first day 00:00
今日 00:00=>Today 00:00
上月第一天與上月結束=>The first day of last month ends
轉為 naive datetime（去除 tzinfo）=>Convert to naive datetime (remove tzinfo)
優先以 created_at 計算，若資料沒有 created_at 則 fallback 以 booking_time=>Priority is used to calculate with created_at. If the data does not have created_at, fallback is used to booking_time
嘗試用 created_at=>Try creating_at
若全部為 0，改用 booking_time=>If all are 0, use booking_time instead
狀態統計=>Status statistics
路線統計（總數/啟用/站點覆蓋率）=>Route statistics (total/enabled/site coverage)
會員活躍度分析 API=>Member Activity Analysis API
計算時間範圍=>Calculate the time range
定義活躍度標準=>Define activity criteria
高活躍：最近登入 <= 3天=>Highly active: Last login <= 3 days
中活躍：最近登入 4-7天=>Moderately active: last logged in 4-7 days
低活躍：最近登入 8-30天=>Low active: Last login 8-30 days
不活躍：最近登入 > 30天 或從未登入=>Inactive: last logged in > 30 days or never logged in
查詢各活躍度級別的會員數量=>Check the number of members at each activity level
計算總數和活躍率=>Calculate total number and activity rate
計算最大值用於百分比計算=>Calculate the maximum value for percentage calculation
構建活躍度數據=>Build activity data
返回預設數據以防錯誤=>Return preset data to prevent errors
管理員統計 API=>Administrator Statistics API
計算總管理員數=>Calculate the total number of administrators
計算角色數量=>Calculate the number of roles
假設目前在線管理員為 1 (可以根據實際需求修改)=>Assume that the current online administrator is 1 (can be modified according to actual needs)
資料庫狀況 API=>Database Status API
測試資料庫連線=>Test database connection
轉換為毫秒=>Convert to milliseconds
取得資料表數量=>Number of data sheets obtained
用戶管理 API=>User Management API
基本查詢=>Basic query
搜尋條件（ID、用戶名、LINE ID、Email、電話）=>Search criteria (ID, username, LINE ID, Email, phone number)
嘗試將輸入轉成整數，供精確比對 user_id=>Try to convert the input into an integer for exact comparison of user_id
允許以 ID 搜尋（精確或以 CAST 模糊）=>Allow search by ID (precise or CAST blur)
CAST user_id 為字串做模糊，兼容輸入前綴/混合字串=>CAST user_id fuzzy string, compatible with input prefix/mixed string
狀態篩選=>Status Filter
計算總數=>Calculate the total number
分頁=>Pagination
格式化回應=>Format response
兼容舊值：DB 可能存在 'None'，統一轉成 'no_reservation'=>Compatible with old values: DB may have 'None', and it will be converted to 'no_reservation'
# 移除早期未受權限保護的 create_user，改用下方受保護版本=># Remove the created_user that was not protected by permission in the early stage and use the protected version below instead
# 移除早期未受權限保護的 update_user，改用下方受保護版本=># Remove the early update_user that was not protected by permission and use the protected version below
# 移除早期未受權限保護的 delete_user，改用下方受保護版本=># Remove the delete_user that was not protected by permission in the early stage and use the protected version below instead
用戶登入驗證 API=>User Login Verification API
檢查用戶狀態：停用則禁止登入=>Check user status: login is prohibited if deactivated
檢查用戶是否有密碼設定=>Check whether the user has password settings
檢查密碼=>Check password
密碼格式不正確，可能是舊格式或損壞的資料=>The password is incorrect, it may be an old format or a corrupted information
更新最後登入時間（台灣時間）=>Update the last login time (Taiwan time)
管理員用戶 API=>Administrator User API
建立基本查詢=>Create basic inquiry
搜尋功能=>Search function
排序=>Sort
計算總筆數=>Calculate the total number of transactions
格式化結果=>Format the results
取得管理員角色列表=>Get the administrator role list
獲取當前用戶角色=>Get the current user role
權限檢查=>Permission Check
Super Admin 可以創建任何非 super_admin 之外的角色（若已存在 super_admin）=>Super Admin can create any role other than super_admin (if super_admin already exists)
Admin 只能創建 Dispatcher 帳號=>Admin can only create Dispatcher accounts
檢查用戶名是否已存在=>Check if the username already exists
獲取要編輯的用戶角色=>Get the user role to be edited
Super Admin 可以修改其他用戶的任何屬性，但有特定限制=>Super Admin can modify any attributes of other users, but with specific restrictions
Super Admin 不能修改自己的角色權限（包括降級為 Admin）=>Super Admin cannot modify its role permissions (including downgrading to Admin)
Super Admin 不能把自己的狀態改為停用=>Super Admin cannot change its status to disable
Super Admin 不能修改其他 Super Admin 的任何資訊=>Super Admin cannot modify any other Super Admin information
Admin 的權限限制：只能操作 Dispatcher，用戶角色不可變，可變更其餘資訊（含狀態/密碼/用戶名）=>Admin permission restrictions: Only Dispatcher can be operated, the user role is immutable, and the remaining information can be changed (including status/password/user name)
不能修改角色=>Cannot modify roles
如果要更新用戶名，檢查是否已存在=>If you want to update the username, check if it already exists
更新字段=>Update fields
只有密碼不為空時才更新=>Updated only if the password is not empty
獲取要刪除用戶的角色=>Get the role of the user to be deleted
Super Admin 可以刪除 Admin 用戶，但不能刪除自己或其他 Super Admin=>Super Admin can delete Admin users, but cannot delete themselves or other Super Admins
Admin 只能刪除 Dispatcher=>Admin can only delete Dispatcher
檢查是否為系統管理員（可選的保護機制）=>Check whether you are a system administrator (optional protection mechanism)
假設 ID 1 是超級管理員=>Assume ID 1 is the super administrator
新增路線的請求模型=>New route request model
(已改為使用參數化檢查，移除早期非參數化檢查以避免 SQL 注入風險)=>(Using parameterized checks instead, removing early non-parametric checks to avoid SQL injection risks)
使用參數化查詢，避免 SQL 注入=>Use parameterized queries to avoid SQL injection
direction 只能是 '單向' 或 '雙向'（bus_routes_total schema）=>direction can only be 'one-way' or 'two-way' (bus_routes_total schema)
檢查同名路線（參數化）=>Check the route of the same name (parameterization)
建構 INSERT 的欄位與參數=>Construct the columns and parameters of INSERT
MySQL_Run 對非 SELECT 會回傳 dict {status, lastrowid}=>MySQL_Run will return dict {status, lastrowid} to non-SELECT
若沒拿到 lastrowid，嘗試使用 SELECT LAST_INSERT_ID() 作為 fallback（但需注意連線會不同）=>If you don't get lastrowid, try using SELECT LAST_INSERT_ID() as fallback (but please note that the connection will be different)
不再自動在 bus_route_stations 建立 placeholder 站點=>No longer automatically create placeholder sites in bus_route_stations
確認 route 存在=>Confirm route presence
檢查同名（排除自己）=>Check the same name (exclude yourself)
先確認是否有此路線（優先查 bus_routes_total）=>First confirm whether there is this route (priority check bus_routes_total)
若 bus_routes_total 沒有紀錄，檢查 bus_route_stations=>If there is no record in bus_routes_total, check bus_route_stations
刪除該路線的站點（若有）=>Delete the site for this route (if any)
刪除 bus_routes_total 中的路線紀錄（若有）=>Delete route records in bus_routes_total (if any)
--- 參數化查詢（你的 MySQL_Run 若支援 params，優先這個寫法） ---=>--- Parameterized query (If your MySQL_Run supports params, this writing method will be preferred) ---
若你的 MySQL_Run 不支援 params，就 fallback 用 f-string，但要小心注入=>If your MySQL_Run does not support params, fallback uses f-string, but be careful to inject it.
Fallback：有些自寫函式沒有 params 參數=>Fallback: Some self-written functions do not have params parameters
請務必確認 direction 的字串來源可信=>Please make sure that the source of the direction string is credible
--- 沒資料的處理（擇一：回404 或 回[]）---=>--- Processing of no information (choose one: reply 404 or return [])--
選擇一：回空陣列（前端好處理）=>Select one: Return to empty array (the front-end is easy to handle)
選擇二：回 404=>Select 2: Return 404
raise HTTPException(status_code=404, detail=f"route_id={q.route_id} 無站點資料")=>raise HTTPException(status_code=404, detail=f"route_id={q.route_id} No site profile")
--- 欄位名稱正規化（把 DB 欄位映射成 API 欄位）---=>--- Regularize column names (map DB columns into API columns)---
你若有 station_id 欄位但不打算輸出，就不要映射=>If you have the station_id field but do not intend to output it, don't map it
只 rename 存在的欄位，避免 KeyError=>Only rename exists field to avoid KeyError
--- 型別防呆：數值、時間、NaN 轉換 ---=>--- Type prevention: numerical, time, NaN conversion ---
經緯度=>Latitude and longitude
到站時間 / 順序=>Arrival time/order
created_at -> datetime（避免 pandas.Timestamp 造成驗證錯誤）=>created_at -> datetime (avoid pandas.Timestamp causing verification errors)
只保留我們要輸出的欄位（避免多餘欄位觸發驗證錯）=>Only keep the fields we want to output (avoid unnecessary fields trigger verification errors)
（可選）逐筆建模，能更早在後端發現資料異常=>(Optional) Transaction-by-transaction modeling can detect data anomalies earlier on the backend
===== OTP/驗證碼 API ======>===== OTP/Verification Code API =====
檢查是否鎖定=>Check if it is locked
重送冷卻=>Resend to cool
目的地 rate limit（10 分鐘 3 次）=>Destination rate limit (10 minutes 3 times)
來源 IP rate limit（1 小時 10 次）=>Source IP rate limit (1 hour 10 times)
產生並保存驗證碼=>Generate and save the verification code
將驗證碼與帳號寫入檔案（測試用途，正式環境請關閉 HBUS_OTP_LOG）=>Write the verification code and account to the file (for test purposes, please turn off HBUS_OTP_LOG in the formal environment)
在此整合真實發送（SMS/Email）。目前僅回傳遮罩資訊；若開啟 DEBUG，會回傳 code 方便測試。=>Integrate real sending (SMS/Email) here.Currently, only mask information is transmitted back; if DEBUG is enabled, code will be transmitted back for easy testing.
鎖定檢查=>Lock check
設定鎖定 10 分鐘=>Set lock for 10 minutes
通過：簽發一次性 ticket（10 分鐘）供後續綁定登入/註冊=>Passed: Issuing a one-time ticket (10 minutes) for subsequent binding login/registration
單次使用=>single use
===== 路線站點管理 API ======>===== Route Site Management API =====
optional 原始識別欄位（由前端提供），用於安全更新定位=>optional Original recognition field (provided by the front end) for safe update positioning
若前端未提供 route_name，嘗試以 route_id 去 bus_routes_total 查回=>If the front-end does not provide route_name, try to use route_id to search back
自動騰位：同一路線下，將 >= 新順序 的站點順序整體 +1（允許直接指定順序）=>Automatic vacancies: Under the same route, the site order of >= new order is +1 in the overall order (allows direct order)
忽略騰位錯誤（若沒有唯一約束也可插入）=>Ignore vacancy errors (can be inserted if there is no unique constraint)
參數化 INSERT=>Parameterized INSERT
加入日誌=>Join the log
支援前端傳 original_stop_order 或 original_stop_name 作為原始定位值=>Support front-end transmission original_stop_order or original_stop_name as the original positioning value
若更改 stop_order：採用列表移動演算法以保持唯一性=>If you change stop_order: Use list movement algorithm to maintain uniqueness
上移：new..old-1 全部 +1=>Move up: new..old-1 All +1
下移：old+1..new 全部 -1=>Move down: old+1..new All -1
重排失敗不阻斷=>Reorder failure does not block
最後回退使用 route_id + stop_order（使用者在表單未提供 original_* 時）=>Finally fallback uses route_id + stop_order (when the form does not provide original_*)
先檢查記錄是否存在（參數化）=>Check whether the record exists (parameterization)
從 bus_route_stations 表中獲取所有不同的路線名稱和對應的 route_id=>Get all different route names and corresponding route_id from the bus_route_stations table
如果某些路線沒有 route_id，我們給它們分配一個=>If some routes do not have route_id, we assign them one
為沒有 route_id 的路線分配一個基於名稱的 ID=>Assign a name-based ID to routes without route_id
為其他沒有 route_id 的路線生成 ID=>Generate ID for other routes without route_id
簡單的雜湊函數=>Simple hash function
建構查詢條件=>Construct query conditions
建構 WHERE 子句=>Construct WHERE clause
計算分頁=>Calculate paging
建構主要查詢=>Construct the main query
========== 會員管理：權限保護 ===========>============ Member Management: Permission Protection ===========
僅 super_admin 與 admin 可新增會員；dispatcher 禁止=>Only super_admin and admin can add new members; dispatcher prohibits
處理密碼雜湊=>Handle passwords
清理空白字串=>Clean up blank strings