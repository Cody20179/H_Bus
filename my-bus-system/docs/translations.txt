取得台北時間=>Obtain Taipei time
取得台灣時間的 datetime 物件（無時區資訊，供資料庫使用）=>Get datetime objects for Taiwan time (no time zone information, for use in the database)
月份格式需為 YYYY-MM=>The month format must be YYYY-MM
極簡 In-Memory Redis 替代品（僅供開發測試）。
    支援本檔案用到的方法：get, setex, delete, incr, expire, ttl, ping, set
    注意：非多進程安全，不適合正式環境。
    =>Minimalist In-Memory Redis alternative (development testing only).
Methods used to support this file: get, setex, delete, incr, expire, ttl, ping, set
Note: Not multi-process security and not suitable for formal environments.
單向=>unidirectional
雙向=>Two-way
去程=>Going
回程=>Return
單程=>One Way
從 Bearer token 中獲取當前用戶=>Get the current user from Bearer token
無效的 token 格式=>Invalid token format
用戶不存在=>The user does not exist
無效的 token=>Invalid token
[OTP] redis 模組未安裝，改用 InMemoryRedis（開發用）=>[OTP] Redis module is not installed, use InMemoryRedis instead (for development)
檢查來源是否被允許=>Check if the source is allowed
無效憑證=>Invalid voucher
帳號已停用，請聯繫管理員=>The account has been disabled, please contact the administrator
帳號狀態異常=>Account status abnormal

    取得會員統計資料
    =>Obtain member statistics

    取得會員增長趨勢資料
    參數: days - 查詢天數 (1, 7, 30)
    =>Obtain member growth trend information
Parameters: days - query days (1, 7, 30)

    回傳預約統計：
    - this_month: 本月建立的預約數（以 created_at 為主，若無則以 booking_time）
    - today_new: 今日新建立的預約數
    - pending: 審核中筆數（review_status='pending'）
    - completed: 已完成筆數（reservation_status='completed'）
    - last_month: 上月建立的預約數
    - growth_rate: 相較上月成長率（%）
    =>Return to booking statistics:
- this_month: The number of reservations established this month (mainly created_at, if not, booking_time)
- today_new: Number of newly created appointments today
- pending: Number of transactions in review (review_status='pending')
- completed: The number of completed transactions (reservation_status='completed')
- last_month: The number of appointments created last month
- growth_rate: growth rate compared to last month (%)
起始月份 YYYY-MM=>Starting month YYYY-MM
結束月份 YYYY-MM=>End month YYYY-MM
mode 僅支援 monthly 或 range=>mode only supports monthly or range
month 需介於 1-12=>month needs to be between 1-12
range 模式需提供 start_month 與 end_month=>range mode requires start_month and end_month
end_month 不可早於 start_month=>end_month cannot be earlier than start_month
取得預約趨勢資料時發生錯誤=>An error occurred while obtaining appointment trend information
日期格式 YYYY-MM=>Date format YYYY-MM
mode 參數僅支援 monthly 或 range=>The mode parameter only supports monthly or range
結束月份不可早於開始月份=>The end month cannot be earlier than the beginning month
取得預約狀態資料時發生錯誤=>An error occurred while obtaining the appointment status information

    回傳路線統計：
    - total: bus_routes_total 總路線數
    - active: 啟用路線數（status = 1）
    - inactive: 停用路線數
    - on_time_rate: 以有站點的路線比率作為近似值（DISTINCT route_id / total）
    =>Return route statistics:
- total: bus_routes_total Total Number of Routes
- active: Number of routes enabled (status = 1)
- inactive: Number of routes to be disabled
- on_time_rate: Approximate value using the route ratio with the site (DISTINCT route_id/total)

    取得會員活躍度分析數據
    
    參數:
    - days: 分析天數 (1, 7, 30)
    =>Obtain member activity analysis data

parameter:
- days: Analysis days (1, 7, 30)
高活躍=>Highly active
中活躍=>Active
低活躍=>Low active
不活躍=>Inactive

    取得管理員統計資料
    =>Obtain administrator statistics

    取得資料庫狀況統計
    =>Obtain database status statistics
正常=>normal
良好=>good
一般=>generally
異常=>abnormal
用戶名或密碼錯誤=>Incorrect username or password
帳號已停用，請聯絡管理員=>The account has been disabled, please contact the administrator
用戶尚未設定密碼，請聯絡管理員=>The user has not set a password yet, please contact the administrator
密碼格式錯誤，請聯絡管理員重設密碼=>Password format is wrong, please contact the administrator to reset the password
登入成功=>Login successfully

    取得管理員用戶列表（支援分頁和搜尋）
    
    參數:
    - page: 頁碼 (預設 1)
    - limit: 每頁筆數 (預設 10)
    - search: 搜尋關鍵字（搜尋用戶名）
    - status: 狀態篩選 (active, inactive)
    =>Obtain the administrator user list (supports pagination and search)

parameter:
- page: Page number (Preset 1)
- limit: Number of writings per page (preset 10)
- search: Search for keywords (search for username)
- status: status filter (active, inactive)
未指定=>not specified
取得所有管理員角色=>Obtain all administrator roles
建立新的管理員用戶=>Create a new administrator user
指定的角色不存在=>The specified role does not exist
系統只能有一組 Super Admin=>The system can only have one group of Super Admins
高級管理員只能創建 Dispatcher 角色的帳號=>Senior administrators can only create accounts with the Dispatcher role
沒有權限創建用戶=>No permission to create a user
用戶名已存在=>The username already exists
管理員用戶建立成功=>Administrator user creation successfully
更新管理員用戶=>Update admin user
管理員用戶不存在=>Administrator user does not exist
Super Admin 不能修改自己的角色權限，包括降級為 Admin=>Super Admin cannot modify its role permissions, including downgrading to Admin
Super Admin 不能停用自己的帳號=>Super Admin cannot disable your account
Super Admin 不能修改其他 Super Admin 的資訊=>Super Admin cannot modify other Super Admin information
不能修改 Super Admin 用戶=>Cannot modify Super Admin users
高級管理員不能修改其他 Admin 用戶=>Senior administrators cannot modify other Admin users
無權限修改用戶角色=>No permission to modify user role
沒有權限修改用戶=>No permission to modify the user
管理員用戶更新成功=>Administrator user update successfully
刪除管理員用戶=>Delete the administrator user
不能刪除自己的帳號=>Can't delete your account
Super Admin 不能刪除其他 Super Admin=>Super Admin Cannot delete other Super Admin
高級管理員僅可刪除 Dispatcher 用戶=>Senior administrators can only delete Dispatcher users
沒有權限刪除用戶=>No permission to delete users
無法刪除超級管理員=>Cannot delete super administrator
管理員用戶刪除成功=>Administrator user deletion successfully

# 角色管理 API
@app.get("/roles")
def get_roles(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    return {"roles": [{"role_id": r.role_id, "role_name": r.role_name, "role_description": r.role_description, "permissions": r.permissions, "is_system_role": r.is_system_role} for r in roles]}

@app.post("/roles")
def create_role(role: AdminRoleCreate, db: Session = Depends(get_db)):
    # 移除權限檢查
    new_role = AdminRole(**role.dict())
    db.add(new_role)
    db.commit()
    db.refresh(new_role)
    return {"role_id": new_role.role_id, "message": "角色建立成功"}

@app.put("/roles/{role_id}")
def update_role(role_id: int, role_update: AdminRoleUpdate, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    for key, value in role_update.dict(exclude_unset=True).items():
        setattr(role, key, value)
    db.commit()
    return {"message": "角色更新成功"}

@app.delete("/roles/{role_id}")
def delete_role(role_id: int, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    db.delete(role)
    db.commit()
    return {"message": "角色刪除成功"}

# 權限 API
@app.get("/permissions")
def get_permissions(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    permissions = {}
    for role in roles:
        permissions[role.role_name] = role.permissions.split(',') if role.permissions else []
    return {"permissions": permissions}
=># 角色管理 API
@app.get("/roles")
def get_roles(db: Session = Depends(get_db)):
# 移除權限檢查
roles = db.query(AdminRole).all()
return {"roles": [{"role_id": r.role_id, "role_name": r.role_name, "role_description": r.role_description, "permissions": r.permissions, "is_system_role": r.is_system_role} for r in roles]}

@app.post("/roles")
def create_role(role: AdminRoleCreate, db: Session = Depends(get_db)):
# 移除權限檢查
new_role = AdminRole(**role.dict())
db.add(new_role)
db.commit()
db.refresh(new_role)
return {"role_id": new_role.role_id, "message": "角色建立成功"}

@app.put("/roles/{role_id}")
def update_role(role_id: int, role_update: AdminRoleUpdate, db: Session = Depends(get_db)):
# 移除權限檢查
role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
if not role:
raise HTTPException(status_code=404, detail="角色不存在")
for key, value in role_update.dict(exclude_unset=True).items():
setattr(role, key, value)
db.commit()
return {"message": "角色更新成功"}

@app.delete("/roles/{role_id}")
def delete_role(role_id: int, db: Session = Depends(get_db)):
# 移除權限檢查
role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
if not role:
raise HTTPException(status_code=404, detail="角色不存在")
db.delete(role)
db.commit()
return {"message": "角色刪除成功"}

# 權限 API
@app.get("/permissions")
def get_permissions(db: Session = Depends(get_db)):
# 移除權限檢查
roles = db.query(AdminRole).all()
permissions = {}
for role in roles:
permissions[role.role_name] = role.permissions.split(',') if role.permissions else []
return {"permissions": permissions}
在 bus_routes_total 建立一筆新路線記錄=>Create a new route record in bus_routes_total
路線名稱已存在=>The route name already exists
路線新增成功=>Successful route addition
更新 bus_routes_total 的欄位（部分更新）=>Update the field of bus_routes_total (partially updated)
找不到指定的路線=>The specified route cannot be found
direction 必須為 '單向' 或 '雙向'=>direction must be 'one-way' or 'two-way'
沒有欄位需要更新=>There are no fields to update
路線更新成功=>Route update successfully
刪除路線：會同時刪除對應的 bus_route_stations 以及 bus_routes_total 的紀錄（若存在）。=>Delete route: The corresponding bus_route_stations and bus_routes_total records will be deleted at the same time (if present).
路線刪除成功=>Route deletion successfully
缺少 account=>Missing account
驗證碼已鎖定，請稍後再試=>The verification code is locked, please try again later
發送過於頻繁，請稍後再試=>Send too frequently, please try again later
請求次數過多，稍後再試=>Too many requests, try again later
此 IP 請求過多，請稍後再試=>There are too many requests for this IP, please try again later
缺少 account 或 code=>Missing account or code
已鎖定，請稍後再試=>Locked, please try again later
驗證碼已過期或不存在=>The verification code has expired or does not exist
嘗試次數過多，已鎖定=>Too many attempts, locked
用 ticket 兌換，完成下一步（例如登入/註冊）。這裡僅驗證 ticket 並刪除。=>Redeem with ticket to complete the next step (such as login/register).Here only the ticket is verified and deleted.
ticket 無效或已過期=>ticket invalid or expired
創建新的路線站點=>Create a new route site
站點創建成功=>Site creation successfully
更新路線站點：允許自由改順序，後端自動重排避免衝突。=>Update route site: Allow free order change, and the backend automatically reorders to avoid conflicts.
站點更新成功=>Site update successfully
刪除路線站點=>Delete the route site
找不到要刪除的站點=>The site you want to delete cannot be found
站點刪除成功=>Site deletion successfully
獲取所有路線（從 bus_route_stations 表中提取）=>Get all routes (extracted from the bus_route_stations table)
市民小巴-行動遊花蓮=>Citizen minibus-Motion Tour Hualien
獲取篩選後的路線站點（支援分頁和搜尋）=>Get filtered route stops (supports paging and search)
沒有權限執行此操作=>No permission to do this
缺少必要欄位=>Necessary columns are missing
沒有變更=>no changes
預約不存在=>The appointment does not exist
無效的車輛狀態=>Invalid vehicle status
車牌號碼不可為空=>License plate number must not be empty
可載人數必須大於 0=>The number of people that can be loaded must be greater than 0
車牌號碼已存在=>License plate number already exists
車輛不存在=>The vehicle does not exist
沒有權限新增會員=>No permission to add new members
用戶建立成功=>User creation successfully
沒有權限更新會員=>No permission to update members
用戶更新成功=>User update successfully
沒有權限刪除會員=>No permission to delete a member
用戶刪除成功=>User deletion successfully