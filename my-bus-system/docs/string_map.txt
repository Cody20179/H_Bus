
    取得會員增長趨勢資料
    參數: days - 查詢天數 (1, 7, 30)
    

    取得會員活躍度分析數據
    
    參數:
    - days: 分析天數 (1, 7, 30)
    

    取得會員統計資料
    

    取得管理員用戶列表（支援分頁和搜尋）
    
    參數:
    - page: 頁碼 (預設 1)
    - limit: 每頁筆數 (預設 10)
    - search: 搜尋關鍵字（搜尋用戶名）
    - status: 狀態篩選 (active, inactive)
    

    取得管理員統計資料
    

    取得資料庫狀況統計
    

    回傳路線統計：
    - total: bus_routes_total 總路線數
    - active: 啟用路線數（status = 1）
    - inactive: 停用路線數
    - on_time_rate: 以有站點的路線比率作為近似值（DISTINCT route_id / total）
    

    回傳預約統計：
    - this_month: 本月建立的預約數（以 created_at 為主，若無則以 booking_time）
    - today_new: 今日新建立的預約數
    - pending: 審核中筆數（review_status='pending'）
    - completed: 已完成筆數（reservation_status='completed'）
    - last_month: 上月建立的預約數
    - growth_rate: 相較上月成長率（%）
    

# 角色管理 API
@app.get("/roles")
def get_roles(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    return {"roles": [{"role_id": r.role_id, "role_name": r.role_name, "role_description": r.role_description, "permissions": r.permissions, "is_system_role": r.is_system_role} for r in roles]}

@app.post("/roles")
def create_role(role: AdminRoleCreate, db: Session = Depends(get_db)):
    # 移除權限檢查
    new_role = AdminRole(**role.dict())
    db.add(new_role)
    db.commit()
    db.refresh(new_role)
    return {"role_id": new_role.role_id, "message": "角色建立成功"}

@app.put("/roles/{role_id}")
def update_role(role_id: int, role_update: AdminRoleUpdate, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    for key, value in role_update.dict(exclude_unset=True).items():
        setattr(role, key, value)
    db.commit()
    return {"message": "角色更新成功"}

@app.delete("/roles/{role_id}")
def delete_role(role_id: int, db: Session = Depends(get_db)):
    # 移除權限檢查
    role = db.query(AdminRole).filter(AdminRole.role_id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="角色不存在")
    db.delete(role)
    db.commit()
    return {"message": "角色刪除成功"}

# 權限 API
@app.get("/permissions")
def get_permissions(db: Session = Depends(get_db)):
    # 移除權限檢查
    roles = db.query(AdminRole).all()
    permissions = {}
    for role in roles:
        permissions[role.role_name] = role.permissions.split(',') if role.permissions else []
    return {"permissions": permissions}

Super Admin 不能修改其他 Super Admin 的資訊
Super Admin 不能修改自己的角色權限，包括降級為 Admin
Super Admin 不能停用自己的帳號
Super Admin 不能刪除其他 Super Admin
[OTP] redis 模組未安裝，改用 InMemoryRedis（開發用）
direction 必須為 '單向' 或 '雙向'
end_month 不可早於 start_month
mode 僅支援 monthly 或 range
mode 參數僅支援 monthly 或 range
month 需介於 1-12
range 模式需提供 start_month 與 end_month
ticket 無效或已過期
一般
不活躍
不能修改 Super Admin 用戶
不能刪除自己的帳號
中活躍
低活躍
刪除管理員用戶
刪除路線站點
刪除路線：會同時刪除對應的 bus_route_stations 以及 bus_routes_total 的紀錄（若存在）。
創建新的路線站點
去程
取得台北時間
取得台灣時間的 datetime 物件（無時區資訊，供資料庫使用）
取得所有管理員角色
取得預約狀態資料時發生錯誤
取得預約趨勢資料時發生錯誤
可載人數必須大於 0
單向
單程
嘗試次數過多，已鎖定
回程
在 bus_routes_total 建立一筆新路線記錄
密碼格式錯誤，請聯絡管理員重設密碼
已鎖定，請稍後再試
市民小巴-行動遊花蓮
帳號已停用，請聯絡管理員
帳號已停用，請聯繫管理員
帳號狀態異常
建立新的管理員用戶
從 Bearer token 中獲取當前用戶
找不到指定的路線
找不到要刪除的站點
指定的角色不存在
日期格式 YYYY-MM
更新 bus_routes_total 的欄位（部分更新）
更新管理員用戶
更新路線站點：允許自由改順序，後端自動重排避免衝突。
月份格式需為 YYYY-MM
未指定
極簡 In-Memory Redis 替代品（僅供開發測試）。
    支援本檔案用到的方法：get, setex, delete, incr, expire, ttl, ping, set
    注意：非多進程安全，不適合正式環境。
    
檢查來源是否被允許
正常
此 IP 請求過多，請稍後再試
沒有欄位需要更新
沒有權限修改用戶
沒有權限刪除會員
沒有權限刪除用戶
沒有權限創建用戶
沒有權限執行此操作
沒有權限新增會員
沒有權限更新會員
沒有變更
無效憑證
無效的 token
無效的 token 格式
無效的車輛狀態
無權限修改用戶角色
無法刪除超級管理員
獲取所有路線（從 bus_route_stations 表中提取）
獲取篩選後的路線站點（支援分頁和搜尋）
用 ticket 兌換，完成下一步（例如登入/註冊）。這裡僅驗證 ticket 並刪除。
用戶不存在
用戶刪除成功
用戶名已存在
用戶名或密碼錯誤
用戶尚未設定密碼，請聯絡管理員
用戶建立成功
用戶更新成功
異常
登入成功
發送過於頻繁，請稍後再試
站點刪除成功
站點創建成功
站點更新成功
管理員用戶不存在
管理員用戶刪除成功
管理員用戶建立成功
管理員用戶更新成功
系統只能有一組 Super Admin
結束月份 YYYY-MM
結束月份不可早於開始月份
缺少 account
缺少 account 或 code
缺少必要欄位
良好
請求次數過多，稍後再試
起始月份 YYYY-MM
路線刪除成功
路線名稱已存在
路線新增成功
路線更新成功
車牌號碼不可為空
車牌號碼已存在
車輛不存在
雙向
預約不存在
驗證碼已過期或不存在
驗證碼已鎖定，請稍後再試
高活躍
高級管理員不能修改其他 Admin 用戶
高級管理員僅可刪除 Dispatcher 用戶
高級管理員只能創建 Dispatcher 角色的帳號