        if df_stations.empty:
            rows.append(dict(
                route=str(route_id),
                X=car_lon, Y=car_lat,
                direction=direction,
                Current_Loaction=None,
                license_plate=plate
            ))
            continue

        # Ë®àÁ?Ë∑ùÈõ¢ÔºåÊâæ?ÄËøëÁ?
        df_stations["distance_m"] = df_stations.apply(
            lambda s: haversine(car_lat, car_lon, float(s["latitude"]), float(s["longitude"])),
            axis=1
        )
        nearest = df_stations.loc[df_stations["distance_m"].idxmin()]

        rows.append(dict(
            route=str(route_id),
            X=car_lon,
            Y=car_lat,
            direction=direction,
            Current_Loaction=str(nearest["stop_name"]),
            license_plate=plate
        ))

    # ---------- 5Ô∏è‚É£ ?ûÂÇ≥ÁµêÊ? ----------
    df = pd.DataFrame(rows, columns=["route", "X", "Y", "direction", "Current_Loaction", "license_plate"])
    print(df[["route", "X", "Y", "direction", "Current_Loaction", "license_plate"]].to_dict())
    return df[["route", "X", "Y", "direction", "Current_Loaction", "license_plate"]].to_dict()

@api.get("/GIS_ByRoute", tags=["Client"], summary="Get current bus and nearest stop by route_id")
def get_gis_by_route(route_id: int):
    """
    Given route_id, return current car position and nearest stop info.
    Returns fields: route_id, direction, license_plate, car_lon, car_lat, rcv_dt,
    nearest_stop_name, nearest_distance_m, nearest_stop_order, total_stops, station_id.
    """
    # 1) Find plate and direction from schedule (latest by date)
    rs = MySQL_Doing.run(
        f"""
        SELECT route_no AS route_id, direction, license_plate
        FROM route_schedule
        WHERE route_no = {int(route_id)}
        ORDER BY date DESC
        LIMIT 1
        """
    )

    if not rs or (hasattr(rs, "empty") and rs.empty):
        raise HTTPException(status_code=404, detail="route not found in schedule")

    try:
        row = rs.iloc[0] if hasattr(rs, "iloc") else rs[0]
        direction = str(row["direction"]) if isinstance(row, dict) else str(row.direction)
        plate = (row["license_plate"] if isinstance(row, dict) else row.license_plate)
    except Exception:
        if hasattr(rs, "to_dict"):
            d = rs.to_dict("records")[0]
            direction = str(d.get("direction", ""))
            plate = d.get("license_plate")
        else:
            d = rs[0] if isinstance(rs, list) and rs else {}
            direction = str((d or {}).get("direction", ""))
            plate = (d or {}).get("license_plate")

    if not plate:
        raise HTTPException(status_code=404, detail="license plate not found for route")

    # 2) Latest car position (ttcarimport)
    pos = MySQL_Doing.run(
        f"""
        SELECT car_licence AS plate, X, Y, Speed, Deg, acc, rcv_dt
        FROM ttcarimport
        WHERE car_licence = '{plate.replace("'", "''")}'
        ORDER BY seq DESC
        LIMIT 1
        """
    )

    if not pos or (hasattr(pos, "empty") and pos.empty):
        raise HTTPException(status_code=404, detail="car position not found")

    if hasattr(pos, "to_dict"):
        p = pos.to_dict("records")[0]
    else:
        p = pos[0]

    # Note: follow convention Y=lat, X=lng used in Get_GIS_About
    try:
        car_lng = float(p.get("X"))
        car_lat = float(p.get("Y"))
    except Exception:
        car_lng = None
        car_lat = None

    # 3) Stops for this route and direction
    stops = MySQL_Doing.run(
        f"""
        SELECT
          CAST(route_id AS SIGNED) AS route_id,
          direction,
          stop_name,
          CAST(latitude AS DECIMAL(12,8)) AS latitude,
          CAST(longitude AS DECIMAL(12,8)) AS longitude,
          CAST(stop_order AS SIGNED) AS stop_order,
          station_id
        FROM bus_route_stations
        WHERE route_id = {int(route_id)}
          AND direction = '{direction.replace("'", "''")}'
